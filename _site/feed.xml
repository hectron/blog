<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hector&#39;s Blog</title>
    <description>Hector&#39;s tech blog</description>
    <link>http://hectron.github.io/blog/</link>
    <atom:link href="http://hectron.github.io/blog/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Ignite your passion again</title>
        <description>&lt;h2 id=&quot;tl-dr&quot;&gt;TL; DR&lt;/h2&gt;

&lt;p&gt;You can avoid mental burnout. Give yourself personal time; enjoy things
outside of your job or project. The atomic option is to take vacation
time and travel elsewhere.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;For a myriad of reasons, we go an extra mile when it comes to our jobs,
hobbies or side projects. This is what sets us apart from being just OK
at what we’re doing. There is an unspoken social stigma that we are more
productive when we work more. There are many opponents to this, such as
&lt;a href=&quot;http://www.zpub.com/notes/idle.html&quot;&gt;Bertrand Russell&lt;/a&gt;. I’m not here to
say that you should work less than 40 hours a week to be more
productive. For that, I’d direct you to Tim Ferriss and &lt;a href=&quot;http://fourhourworkweek.com/&quot;&gt;The 40 Hour
Work Week&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Most of us work a lot. Many people in competitive industries educate
themselves outside of work. Others often do work outside of regular work
hours. Doing things like this without a proper time-management system
will lead you to burnout. So let’s talk a bit about time management.&lt;/p&gt;

&lt;h2 id=&quot;an-argument-for-time-management&quot;&gt;An argument for time management&lt;/h2&gt;

&lt;p&gt;Since time is finite, the optimal use of time is doing what benefits us
the most. Some people desire to make money, or to help out the
community. Sometimes what benefits us most is counterintuitive. For
example, it might be taking time off or exercising.&lt;/p&gt;

&lt;p&gt;Notice that beneficial actions are subject to time constraints. This is
why it’s &lt;strong&gt;vital&lt;/strong&gt; to prioritize your time. Simple of todo lists can not
be done unless there’s some form of time management.&lt;/p&gt;

&lt;p&gt;In the programming world, time management helps you &lt;strong&gt;focus&lt;/strong&gt;. If you
know that you only have &lt;code&gt;X&lt;/code&gt; amount of time to do something, that has
many cognitive effects. This is why in scrum it’s important to break up
your stories into smaller stories if possible. By breaking up priorities
into smaller portions, cognitive load is reduced.&lt;/p&gt;

&lt;h2 id=&quot;branching-away&quot;&gt;Branching away&lt;/h2&gt;

&lt;p&gt;Doing to much of the same thing will make you better at it, but it also
limits you. A friend of mine recently told me about a couple of people
in grad school who made a poster that read: “I went to journalism school
and all I got was illiteracy.” Doing too much of one thing can cause
burnout. &lt;strong&gt;This is why it’s important to branch out.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To make muscles grow, they should be strenuously used and rested. Your
mental muscles work like this. &lt;a href=&quot;http://www.newyorker.com/online/blogs/newsdesk/2013/01/new-skills-for-a-new-year.html&quot;&gt;Learning different things improves
working memory, verbal intelligence and language
skills&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The best way to branch out is to pick what you’re interested in and
practice it in small steps. &lt;a href=&quot;http://en.wikipedia.org/wiki/Distributed_Practice&quot;&gt;Practice
it&lt;/a&gt; to better learn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Expect to fail a few times and learn from your mistakes. That’s where
the growth is.&lt;/strong&gt; It’s also important to social with other people. This
is one of the most effective ways to get your mind off of work. It also
gives you another person’s insight.&lt;/p&gt;

&lt;p&gt;I have taken up weight lifting and writing music. Both of these things
relieve stress, which clears my mind. As a result, I’m usually able to
keep a fresh mind when tackling problems at work.&lt;/p&gt;

&lt;h2 id=&quot;getting-back-into-the-swing-of-things&quot;&gt;Getting back into the swing of things&lt;/h2&gt;

&lt;p&gt;When you have reduced your stress, it’s easy to fall victim to the
stress again. Before any stress comes your way, try to pay attention to
what is going on. Be mindful of what is asked and how reasonable the ask
is. I find that &lt;strong&gt;being vocal about unreasonable asks/situations&lt;/strong&gt; helps
a lot to reduce stress.&lt;/p&gt;

&lt;p&gt;As you return to your usual routine, try to incorporate the pervious
methods mentioned. Spending your time on something that is not related
to work. Make time for these things and stick to the schedule. While
this won’t completely end stress, it will reduce it to a manageable
level.&lt;/p&gt;

&lt;h2 id=&quot;nuclear-option-break-the-loop&quot;&gt;Nuclear Option: Break the loop&lt;/h2&gt;

&lt;p&gt;If none of this works, there are two options: take a long vacation or
quit.&lt;/p&gt;

&lt;p&gt;When a job consistently requires overtime, consider other options. At my
old job, I was not salaried so I worked at 40 hours a week. This helped
me build a list of things that I &lt;em&gt;actually&lt;/em&gt; wanted to get done.
Unfortunately the management there was demanding. I had to do a lot of
work that required overtime, which was frowned upon. This created a lot
of tension anytime I approached the 40 hour mark. I ultimately found a
better job elsewhere.&lt;/p&gt;

&lt;p&gt;My current job’s management is understanding. Yet, I still find myself
underestimating how long something will take. On critical projects, I
put in a lot more work than expected.&lt;/p&gt;

&lt;p&gt;Thus, I get burned out at work every now and then. When this happens, I
like to take a vacation. Taking &lt;strong&gt;one week&lt;/strong&gt; off is what I find to be
optimal. That is just enough time to enjoy a place and have leftover
vacation days.&lt;/p&gt;

&lt;h2 id=&quot;final-notes&quot;&gt;Final notes&lt;/h2&gt;

&lt;p&gt;There is no clear guide to cut out stress for everyone. There are some
overlapping patterns and methods. Most of them involve getting your mind
off of what’s burning you out.&lt;/p&gt;

&lt;p&gt;Remember to stay healthy and take care of yourself. Your work will
definitely reflect this state of well being.&lt;/p&gt;

</description>
        <pubDate>Thu, 02 Jul 2015 07:00:00 -0500</pubDate>
        <link>http://hectron.github.io/blog/2015/07/02/igniting-your-passion-again/</link>
        <guid isPermaLink="true">http://hectron.github.io/blog/2015/07/02/igniting-your-passion-again/</guid>
      </item>
    
      <item>
        <title>How into Code Review</title>
        <description>&lt;h2 id=&quot;tl-dr&quot;&gt;TL; DR&lt;/h2&gt;

&lt;p&gt;Context is king. Be specific about what your code is doing and &lt;em&gt;why&lt;/em&gt;
it’s the way that it is.&lt;/p&gt;

&lt;p&gt;Don’t be a chump when you review someone else’s code. Find what you like
about the code review and comment on it. Find something you don’t like?
Question it nicely.&lt;/p&gt;

&lt;p&gt;Code reviews are about sharing and learning.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;a-little-background&quot;&gt;A little background&lt;/h2&gt;

&lt;p&gt;When I started working at my current job, I was overwhelmed. The
applications that we had were massive, monolithic applications that were
designed surprisingly well.&lt;/p&gt;

&lt;p&gt;It may have been to due the actual visibility of code online, but I
started getting concerned about the code that was being merged in. I
pestered my manager to allow me to pair program or code review with some
developers, if only for just an hour a week. My manager was all for it,
but no other developer wanted to pair with me.&lt;/p&gt;

&lt;p&gt;After several months of trying, I kept bringing it up to my manager and
we decided that perhaps we should implement code reviews via Pull
Requests.&lt;/p&gt;

&lt;h2 id=&quot;the-theory-of-pull-requests&quot;&gt;The theory of Pull Requests&lt;/h2&gt;

&lt;p&gt;In theory, pull requests should be a place where intelligent
conversation is had regarding code that is to be merged. They should be
reviewed, accepted and merged for the code to actually go out. It should
have many pairs of eyes looking at it to try to see what consequences it
will have.&lt;/p&gt;

&lt;p&gt;This is all great if you have a team that actively reviews each other’s
code. The best way to go about implementing a strong code review culture
is to &lt;strong&gt;lead by example&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;code-reviews-201&quot;&gt;Code Reviews 201&lt;/h2&gt;

&lt;h3 id=&quot;preparing-to-ask-for-a-review&quot;&gt;Preparing to ask for a review&lt;/h3&gt;

&lt;p&gt;I like to write up my code review request before asking someone to
review my code. The total write up is about 3-5 paragraphs. The write up
contains about three sections.&lt;/p&gt;

&lt;p&gt;The first section provided is titled “context” in which the context for
the work is explained. This explains explains the business value of why
the work was needed.&lt;/p&gt;

&lt;p&gt;The next section is titled “cause.” It explains why the previous code
was doing what it was. If it’s a new feature, explain why the old
features were just not cutting it. This is usually clear by the time the
code is ready.&lt;/p&gt;

&lt;p&gt;The last section is titled “solution.” This is where one &lt;strong&gt;succinctly&lt;/strong&gt;
explains the work done and what it hopes to accomplish.&lt;/p&gt;

&lt;h3 id=&quot;asking-for-a-code-review&quot;&gt;Asking for a code review&lt;/h3&gt;

&lt;p&gt;Once the write-up is ready, either copy your code into a code-sharing
tool like &lt;a href=&quot;https://gist.github.com/&quot;&gt;Gist&lt;/a&gt;,
&lt;a href=&quot;http://jsfiddle.net/&quot;&gt;JsFiddle&lt;/a&gt;, &lt;a href=&quot;https://code.stypi.com/&quot;&gt;Stypi&lt;/a&gt;, or
open a pull request. If you’re not going to merge it in, label it as so.&lt;/p&gt;

&lt;p&gt;Find a co-worker, colleague, friend, or an online coding website. 
&lt;strong&gt;Kindly and briefly&lt;/strong&gt; ask for a code review if they have time. Provide
them with the short summary of the code in question, and &lt;em&gt;give them a
clear date for when you’d expect the code to be reviewed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The last point is critical: if the code is needed to be reviewed for a
same-day release, you’ll want to find someone who will take time out of
their day to help you out.&lt;/p&gt;

&lt;h3 id=&quot;reviewing-someone-elses-code&quot;&gt;Reviewing someone else’s code&lt;/h3&gt;

&lt;p&gt;There are three rules I abide by.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t be a chump.&lt;/li&gt;
  &lt;li&gt;Provide useful, timely feedback.&lt;/li&gt;
  &lt;li&gt;Don’t be a chump.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If someone asked you to review their code, they want it to be critiqued
and improved. This does not give the code reviewer a pass to be a chump.&lt;/p&gt;

&lt;p&gt;The first thing I do is I &lt;strong&gt;really try to&lt;/strong&gt; find things about the code
that I like.  When a code review has some questionable code, simply
question it. It’s better to improve code by questioning it rather than
insulting the author.&lt;/p&gt;

&lt;p&gt;If you find something that could be better, phrase your findings such
that they form a question. This will lesson the negativity resulting
from identifying spotty code.&lt;/p&gt;

&lt;p&gt;Be courteous and ask when they expect feedback by. As mentioned above,
sometimes a review is critical and you might not have time to review it.
That’s OK. They’ll understand.&lt;/p&gt;

&lt;p&gt;Lastly, remember to be positive. The purpose of code reviews is to share
knowledge and improve the quality of the base code. Work together toward
that goal and not against each other to prove who can code better.&lt;/p&gt;

&lt;h2 id=&quot;final-notes&quot;&gt;Final notes&lt;/h2&gt;

&lt;p&gt;I think code reviews and/or pull requests should be a part of everyone’s
work flow. Paired with intelligent conversation, they truly improve the
quality of the code base.&lt;/p&gt;

&lt;p&gt;If you ask for a code review, I challenge you to lead by example by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Writing at least 3 paragraphs explaining your change.&lt;/li&gt;
  &lt;li&gt;Doing it frequently so that they can be easily reviewed.&lt;/li&gt;
  &lt;li&gt;Be kind when asking for a code review.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are a person reviewing someone else’s code, I challenge you to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Drop your ego while reviewing code.&lt;/li&gt;
  &lt;li&gt;Be timely and helpful in your reviews.&lt;/li&gt;
  &lt;li&gt;Ask positive questions when you find bad code.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 02 Jul 2015 07:00:00 -0500</pubDate>
        <link>http://hectron.github.io/blog/2015/07/02/how-into-code-review/</link>
        <guid isPermaLink="true">http://hectron.github.io/blog/2015/07/02/how-into-code-review/</guid>
      </item>
    
      <item>
        <title>Delaying a front-end hotfix</title>
        <description>&lt;h2 id=&quot;tl-dr&quot;&gt;TL; DR&lt;/h2&gt;

&lt;p&gt;This was done in Chrome by adding a “page” bookmark, and pasted the following
into the URL of the bookmark:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript:jQuery(&#39;.currency-options&#39;).toggle();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Whenever the end user would not be able to see the section, they simply click
the new bookmark and the section would show up.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;a-little-background&quot;&gt;A little background&lt;/h2&gt;

&lt;p&gt;There was an error in one of our applications recently. The error involved a
section in the DOM that was not displaying to the end user (but it &lt;em&gt;was&lt;/em&gt; in the
DOM). &lt;/p&gt;

&lt;p&gt;I suspect that this error was the result of hot-fixing every day of our two week
sprint. Let that sit.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We hot-fixed every day in our two week sprint.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The team’s morale was at an all-time low and we decided to bite the bullet and
just take two days to prep an actual release. During the time we were preparing
the release, a critical issue came in. Intranet users were unable to see a
currency box that is critical.&lt;/p&gt;

&lt;h2 id=&quot;finding-out-the-problem&quot;&gt;Finding out the problem&lt;/h2&gt;

&lt;p&gt;The very first thing I did was I verified the issue for multiple users. Then I
inspected the area of the front-end application where the content was missing.&lt;/p&gt;

&lt;p&gt;What happened was that there was bad data parsing being done on the app, and a
callback was never being fired. The callback simply performed a
&lt;code&gt;jQuery.toggle()&lt;/code&gt; with the data that was being parsed.&lt;/p&gt;

&lt;p&gt;jQuery specifies that the &lt;code&gt;toggle()&lt;/code&gt; method simply &lt;code&gt;Use true to show the element
or false to hide it.&lt;/code&gt; Therefore all we needed to do is somehow call toggle on
that element whenever a user tried to view it.&lt;/p&gt;

&lt;h2 id=&quot;sometimes-you-gotta-patch&quot;&gt;Sometimes you gotta patch&lt;/h2&gt;

&lt;p&gt;Since we were on track to make a release, we had to make a decision. Either
involve a whole team and schedule a deploy to take place later in the evening,
avoid fixing the issue (not really an option) or find a work around.&lt;/p&gt;

&lt;p&gt;Rather than starting another multi-hour hot-fix that would involve coding a
solution, updating integration tests to verify the solution, and have a QA team
perform a regression test, I ended up coding a JavaScript function, saved it as
a bookmark, and gave the bookmark to the main intranet users.&lt;/p&gt;

&lt;h2 id=&quot;why-use-the-bookmark-approach&quot;&gt;Why use the bookmark approach?&lt;/h2&gt;

&lt;p&gt;We were already breaking many rules in proper, ethical, and respectable
development. Luckily, we &lt;strong&gt;only support the latest version of Google Chrome on
&lt;em&gt;Mac&lt;/em&gt;&lt;/strong&gt;. Having only to worry about fixing this on one browser was a blessing.&lt;/p&gt;

&lt;p&gt;The code I ended up writing was this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript:jQuery(&#39;.currency-options&#39;).toggle();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We packaged that up into a bookmark for users to have in their Chrome bookmarks
toolbar, and before you knew it, all of our users who did not have access to
those fields were now pleased to be able to check out and edit their values.&lt;/p&gt;

&lt;h2 id=&quot;final-notes&quot;&gt;Final notes&lt;/h2&gt;

&lt;p&gt;If you’re reading this blog, then you know that I try to follow standard
procedures but often have to deviate from them in order to accomplish something. &lt;/p&gt;

&lt;p&gt;Unfortunately, we were in a position where we didn’t want to modify production
code, but wanted to get a temporary fix our as soon as possible. This
work-around worked just fine and it gave us enough breathing room to make a
(significant) release.&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Apr 2015 16:13:00 -0500</pubDate>
        <link>http://hectron.github.io/blog/2015/04/12/preventing-a-hotfix/</link>
        <guid isPermaLink="true">http://hectron.github.io/blog/2015/04/12/preventing-a-hotfix/</guid>
      </item>
    
      <item>
        <title>Using IFTTT to leverage the invisible hand</title>
        <description>&lt;h2 id=&quot;tl-dr&quot;&gt;TL; DR&lt;/h2&gt;

&lt;p&gt;You can set up a custom recipe in &lt;a href=&quot;https://ifttt.com&quot;&gt;IFTTT&lt;/a&gt; to alert you
whenever a new listing is available on &lt;a href=&quot;http://craigslist.org/&quot;&gt;Craigslist&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Keep &lt;a href=&quot;https://ifttt.com/recipes/229-send-yourself-emails-for-new-craigslist-postings-from-any-search-you-re-interested-in&quot;&gt;this website loaded in the
background&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On &lt;a href=&quot;http://craigslist.org/&quot;&gt;Craigslist&lt;/a&gt;, perform a search, copy the URL from
the address bar after the search has been performed, paste it into the search
URL box in the IFTTT, enter in your e-mail, and make the recipe!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;a-little-background&quot;&gt;A little background&lt;/h2&gt;

&lt;p&gt;One thing my readers should know is that I’m a stan of music – all variety of
music. This is likely because I consider myself a hobbyist musician. As a
result, I suffer from what other musicians call &lt;strong&gt;GAS&lt;/strong&gt; (not necessarily the
result of dietary choices). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GAS&lt;/strong&gt; is known in the musician’s community as
&lt;strong&gt;Gear Acquisition Syndrome&lt;/strong&gt;; &lt;strong&gt;GAS&lt;/strong&gt; means that you love collection gear.&lt;/p&gt;

&lt;p&gt;I currently use a &lt;a href=&quot;http://www.voxshowroom.com/uk/amp/ad30.html&quot;&gt;Vox AD30VT&lt;/a&gt;, a
small amp that has a tube in the preamp. It was OK for small band practices,
but the clean volume was just not cutting it – I need more wattage.&lt;/p&gt;

&lt;p&gt;Before starting my quest to purchase an amp, I decided that whatever amp I got
needed to have the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Affordability&lt;/li&gt;
  &lt;li&gt;Reliability&lt;/li&gt;
  &lt;li&gt;Volume&lt;/li&gt;
  &lt;li&gt;Clean headroom&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short, I wanted a tube amp that was reliable and affordable. I set a budget
of $500 USD and performed research. &lt;/p&gt;

&lt;p&gt;After a few searches, I came to the
conclusion that a &lt;a href=&quot;http://www.fender.com/guitar-amplifiers/vintage-pro-tube/blues-deluxe-reissue/product-223220.html&quot;&gt;Fender Blues
Deluxe&lt;/a&gt;
or a &lt;a href=&quot;http://peavey.com/products/index.cfm/item/801/118120/Classic%2030&quot;&gt;Peavey
Classic&lt;/a&gt;
would have to be the amp that I choose.&lt;/p&gt;

&lt;p&gt;Because these amps are just over my budget, enter Craigslist.&lt;/p&gt;

&lt;h2 id=&quot;leveraging-if-this-then-that-ifttt&quot;&gt;Leveraging If This Then That (IFTTT)&lt;/h2&gt;

&lt;p&gt;As soon as I thought about monitoring a search query and ensuring I was
up-to-date with the search queries, I thought about automating this using
&lt;a href=&quot;https://ifttt.com/&quot;&gt;IFTTT&lt;/a&gt;. The idea is that I would perform a search query,
and anytime a new result was returned, I would get notified ASAP so that I
could act on it.&lt;/p&gt;

&lt;p&gt;I’m using &lt;a href=&quot;https://ifttt.com/recipes/229-send-yourself-emails-for-new-craigslist-postings-from-any-search-you-re-interested-in&quot;&gt;this following recipe to monitor Craigslist
changes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first thing I did was perform the search query that I needed. After that, I
copied the URL from the search result and pasted it into the Craiglist box
within the recipe page. &lt;/p&gt;

&lt;p&gt;I then entered an e-mail address and saved the recipe. After it was saved, I
went into My Recipes and ended up modifying it. I changed the subject of the 
e-mail to be &lt;code&gt;[CL Deal] Peavey Classic&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, if you’re reading this blog, then you know I’m a bit more… unique
than the average internet user. Therefore, I ended up creating three different
alerts. Each one using the same term, but with a different maximum price.&lt;/p&gt;

&lt;p&gt;This allowed me to change the subject of the e-mail that will be sent to myself
to something like &lt;code&gt;[CL BUY THIS NOW] Peavey Classic&lt;/code&gt; or something of that
nature.&lt;/p&gt;

&lt;h2 id=&quot;why-not-use-craigslist-alerts&quot;&gt;Why not use Craigslist alerts?&lt;/h2&gt;

&lt;p&gt;I’m not going to lie – I didn’t know Craigslist alerts existed. Knowing that
now, I realize that one benefit that you have by using IFTTT is that you have a
centralized location for all your queries. Additionally, IFTTT will alert you
whenever something goes wrong with the service/integration.&lt;/p&gt;

&lt;h2 id=&quot;final-notes&quot;&gt;Final notes&lt;/h2&gt;

&lt;p&gt;Leveraging web automation tools like &lt;a href=&quot;https://ifttt.com/&quot;&gt;IFTTT&lt;/a&gt; is a great way
to look for deals or to get alerts (weather, movies, etc). Hopefully by
leveraging these automation tools, I could stop hawking websites during work
hours and just wait for the deals to come to me rather than the other way
around.&lt;/p&gt;

</description>
        <pubDate>Sat, 28 Mar 2015 07:00:00 -0500</pubDate>
        <link>http://hectron.github.io/blog/2015/03/28/ifttt/</link>
        <guid isPermaLink="true">http://hectron.github.io/blog/2015/03/28/ifttt/</guid>
      </item>
    
      <item>
        <title>Rewriting Git history for fun and profit</title>
        <description>&lt;h2 id=&quot;tl-dr&quot;&gt;TL; DR&lt;/h2&gt;

&lt;p&gt;You can appear like a competent programmer by rewriting your commit
history with the following commands:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset HEAD~n&lt;/code&gt; where n is the number of prior commits.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add --patch&lt;/code&gt; to select the changes you want to include in a commit.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you are like me, then you are likely to make a lot of Git commits.
Your commits might address spacing issues in code, or renaming variables
only to rename them back. You might be forced to fix a bug in the
process of working on your feature.&lt;/p&gt;

&lt;p&gt;If you find a lot of unrelated data in a commit, you might want to
consider rewriting your commit history. This good shows you how to
rewrite history assuming that your changes are the latest changes in the
branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: I oppose rewriting history on your &lt;strong&gt;master&lt;/strong&gt; branch. This is
considered bad practice and is discouraged.&lt;/p&gt;

&lt;h2 id=&quot;developing-a-plan&quot;&gt;Developing a plan&lt;/h2&gt;

&lt;p&gt;When you are going to rewrite your Git commit history, you need to
identify what the purpose of the rewrite is. Are you trying to group all
your changes to a test suite? Are you creating new database migrations?
Are you working on two different components that are unrelated?
&lt;em&gt;Identify what you want to accomplish&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For the purpose of this tutorial, we will suppose that I grouped a
commit where I modified an HTML page, along with tweak it’s CSS and
added some javascript functions. My desired goal is to group all the
changes I made to the HTML markup in one commit, group all the CSS
changes in another commit and group all the Javascript changes in their
own commit.&lt;/p&gt;

&lt;p&gt;Here is what my original commit looked like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;commit 23106d0d38bd5a774d61f4632839d6fb61f20c66 Author: Hector Rios
&amp;lt;my@email.com&amp;gt; Date:   Fri Feb 13 15:26:22 2015 -0600

    Updated my Contact page.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;breaking-the-bad&quot;&gt;Breaking (the) bad&lt;/h2&gt;

&lt;p&gt;The first step you need to do is rollback the changes in that commit so
that we can split them up into individual commits. To do this, do the
following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset HEAD^&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will go back one commit and unstage your commit’s changes. So now,
you want to run the command &lt;code&gt;git add --patch&lt;/code&gt;. This will bring an
interactive prompt in which you can select whether or not to stage that
change. In our case, we want to include only the changes we made to the
&lt;code&gt;*.html&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Once we selected all the changes, we commit that change, and move on to
the next file. When we do this to our stylesheets and javascript files,
we will now have three commits.&lt;/p&gt;

&lt;p&gt;Pretty nifty right? How about if we wanted to group by feature? Let’s do
that instead now.&lt;/p&gt;

&lt;h2 id=&quot;undoing-our-changes-and-grouping-by-feature&quot;&gt;Undoing our changes and grouping by feature&lt;/h2&gt;

&lt;p&gt;Since we now have three commits of our theoretical HTML/CSS/JS pages, we
need to undo all three commits. I personally squash the commits and then
repeat the trick above. So the commands look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rebase -i HEAD~3 (Then squash them into one commit) 
git reset HEAD^ 
git add --patch (select the chunks that relate to your feature)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way you can combine the changes per feature and commit them
individually.&lt;/p&gt;

&lt;h2 id=&quot;final-notes&quot;&gt;Final notes&lt;/h2&gt;

&lt;p&gt;The idea is that you combine your commits into one, then undo the
changes so that they are all unstaged. You then strategically stage them
and commit them. This way, your git history is logical.&lt;/p&gt;

</description>
        <pubDate>Sun, 22 Feb 2015 06:00:00 -0600</pubDate>
        <link>http://hectron.github.io/blog/2015/02/22/rewriting-git-history/</link>
        <guid isPermaLink="true">http://hectron.github.io/blog/2015/02/22/rewriting-git-history/</guid>
      </item>
    
      <item>
        <title>Using Nitrous.IO for Web Development</title>
        <description>&lt;h2 id=&quot;tl-dr&quot;&gt;TL; DR&lt;/h2&gt;

&lt;p&gt;You can create a very functional development environment on Nitrous that is
accessible from anywhere that has an internet connection. Unfortunately, this is
a flaw. Without a fast connection, Nitrious might not be very accessible.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Technologists are familiar with &lt;a href=&quot;http://en.wikipedia.org/wiki/Moore%27s_law&quot;&gt;Moore’s
Law&lt;/a&gt; which states that the number of
transistors doubles every two years. In turn, this affects our computeres and
phones by allowing us to have more processing power. &lt;/p&gt;

&lt;p&gt;But what happens when your processing power is so efficient that each hardware
upgrade is less enticing?&lt;/p&gt;

&lt;p&gt;Personally, I consolidate my hardware to optimize it for Software engineering.&lt;/p&gt;

&lt;h2 id=&quot;developing-a-plan&quot;&gt;Developing a plan&lt;/h2&gt;

&lt;p&gt;I found myself using the terminal and Google Chrome a lot. I use Virtual
machines for doing development on Linux environments.&lt;/p&gt;

&lt;p&gt;My desktop is a custom built gaming computer that is seriously over-powered and
ridiculously underused; I don’t really consume much media on my computer except
for light video watching on Netflix. &lt;/p&gt;

&lt;p&gt;Most of my media is stored in &lt;a href=&quot;https://dropbox.com/&quot;&gt;the cloud&lt;/a&gt;,
&lt;a href=&quot;https://www.github.com/&quot;&gt;GitHub&lt;/a&gt; or in a &lt;a href=&quot;http://www.newegg.com/Product/Product.aspx?Item=N82E16822236519&quot;&gt;2 TB Western Digital Hard
Drive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take inventory here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A terminal&lt;/li&gt;
  &lt;li&gt;A browser&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;when-life-gives-you-saas-you-take-it&quot;&gt;When life gives you SaaS, you take it&lt;/h2&gt;

&lt;p&gt;There are &lt;a href=&quot;http://lifehacker.com&quot;&gt;plenty of websites&lt;/a&gt; out there that teach you
how to make use of many cloud services in creative ways. Seeing as how it’s
increasingly difficult to not be connected in online services, I decided to
&lt;strong&gt;endure&lt;/strong&gt; the cloud and try out &lt;a href=&quot;https://nitrous.io/&quot;&gt;Nitrous.IO&lt;/a&gt; to do my web
development from an online IDE. &lt;/p&gt;

&lt;h2 id=&quot;the-things-it-does-good&quot;&gt;The things it does good&lt;/h2&gt;

&lt;p&gt;Nitrous offers a &lt;a href=&quot;https://chrome.google.com/webstore/detail/nitrousio-web-app/kcbmakmdbnehgbakmgibcpjpafenmohd?hl=en&quot;&gt;Google Chrome
App&lt;/a&gt;
that is amazing if you log into Chrome. This allows you to have Nitrous
installed on any Chrome you want.&lt;/p&gt;

&lt;p&gt;The terminal it provides is a full-fledged Linux bash terminal, which means that
most of your favorite dotfiles can be implemented in the terminal. I was able to
set up a NodeJS server very quickly, and had a fully functional development
environment thanks to migrating my dotfiles to a Git repository.&lt;/p&gt;

&lt;p&gt;Do not underestimate the ability to have a fully functional development
environment within minutes, that can be accessed from anywhere, on any kind of
machine. While this might be scary to some, it’s not nearly as bad as you’d
think.&lt;/p&gt;

&lt;h2 id=&quot;the-things-it-does-bad&quot;&gt;The things it does bad&lt;/h2&gt;

&lt;p&gt;Nitrous can be slow at times, and it requires you to have a fast internet
connection. Without a fast internet connection, Nitrous can be slow and lag when
doing any text editing.&lt;/p&gt;

&lt;p&gt;Having to set up an account on Nitrous might be another flaw for people.&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nitrous.io/&quot;&gt;Nitrous&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lifehacker.com/&quot;&gt;LifeHacker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 15 Feb 2015 06:00:00 -0600</pubDate>
        <link>http://hectron.github.io/blog/2015/02/15/using-nitrous-io/</link>
        <guid isPermaLink="true">http://hectron.github.io/blog/2015/02/15/using-nitrous-io/</guid>
      </item>
    
      <item>
        <title>Setting up a blog</title>
        <description>&lt;h2 id=&quot;tl-dr&quot;&gt;TL; DR&lt;/h2&gt;

&lt;p&gt;I used &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; with the &lt;a href=&quot;https://github.com/johnotander/pixyll&quot;&gt;Pixyll
theme&lt;/a&gt;, with all my posts living
within &lt;a href=&quot;https://github.com/hectron/blog&quot;&gt;my blog’s GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;We’re in a strange time in technology. Voicing your opinion online has
never been easier. There are infinite resources to create a blog online,
many claiming to be the best or claim to provide a productive workflow.
How does one decide which to use?&lt;/p&gt;

&lt;h2 id=&quot;there-is-not-a-one-size-fit-all&quot;&gt;There is not a one-size-fit-all&lt;/h2&gt;

&lt;p&gt;Unfortunately, this is true. Consider managing documents.&lt;/p&gt;

&lt;p&gt;Some people are productive by keeping everything in their desktop,
others are most productive by keeping everything on a
&lt;a href=&quot;https://dropbox.com/&quot;&gt;Dropbox&lt;/a&gt;, others keep everything in a &lt;a href=&quot;https://bitbucket.org/&quot;&gt;private
repository&lt;/a&gt;. The truth of the matter is you need
to choose what’s best for &lt;em&gt;you&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-i-settled-on-jekyll&quot;&gt;Why I settled on Jekyll&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;I’ve been tossing around the idea of abandoning my desktop
environment.&lt;/em&gt; I currently use a custom built desktop computer which I
have not been able to game on. In an effort to take a more minimal
approach, I have started to back up a lot of my data into my GitHub. I
have over 3 TB of space in my desktop, of which &lt;em&gt;I personally&lt;/em&gt; use about
200 MB of, most of which is code I write.&lt;/p&gt;

&lt;p&gt;I also like to write during my commute, so I would like a blog that can
be worked on offline and then uploaded when I feel like the content is
decent enough. I have been doing a lot of Javascript development lately,
and one platform that caught my eye is &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt;.
Ghost is a blogging platform that runs on &lt;a href=&quot;https://nodejs.org&quot;&gt;NodeJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Due to the fact that I’m aiming to &lt;em&gt;simplify&lt;/em&gt; my life, I don’t want to
lose sight of my end goal (which is writing) by having to worry about
how to configure, host and maintain my system. Similarly, I don’t want
to have another place on the internet where my password is used, even if
I rely on password managers.&lt;/p&gt;

&lt;p&gt;Since I always interact with my git repositories, I figured that
anything which could be maintained using Vim &amp;amp; Git is going to be a
winner. Enter Jekyll.&lt;/p&gt;

&lt;h2 id=&quot;the-power-of-community&quot;&gt;The power of community&lt;/h2&gt;

&lt;p&gt;One thing which Jekyll has going for it is it’s extensive documentation
and community. It’s very extensible and can very easily be tweaked.
Combine it’s ability to be run on multiple environments along with
integrating with &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, and you have
a combination that’s hard to beat (at least if you’re a developer who is
unafraid of the terminal).&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/johnotander/pixyll&quot;&gt;Pixyll theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 07 Feb 2015 10:47:00 -0600</pubDate>
        <link>http://hectron.github.io/blog/2015/02/07/setting-up-a-blog/</link>
        <guid isPermaLink="true">http://hectron.github.io/blog/2015/02/07/setting-up-a-blog/</guid>
      </item>
    
  </channel>
</rss>
